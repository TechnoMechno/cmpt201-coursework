#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();  // Create a new child process

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    } 
    else if (pid == 0) {
        // --- Child process ---
        printf("Child: PID = %d\n", getpid());
        sleep(2);  // Simulate some work
        printf("Child: Done!\n");
        exit(42);  // Exit with a custom status
    } 
    else {
        // --- Parent process ---
        int status;
        printf("Parent: waiting for child (PID = %d)...\n", pid);

        pid_t child_pid = waitpid(pid, &status, 0);  // Block until child finishes

        if (child_pid == -1) {
            perror("waitpid failed");
        } else {
            printf("Parent: child %d finished.\n", child_pid);

            // Check how child exited
            if (WIFEXITED(status)) {
                printf("Parent: child exited normally with status %d\n", WEXITSTATUS(status));
            } else if (WIFSIGNALED(status)) {
                printf("Parent: child killed by signal %d\n", WTERMSIG(status));
            }
        }
    }

    return 0;
}
